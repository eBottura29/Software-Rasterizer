from classes import float3

# Generated by AI
# def obj_parser(file_path):
#     """
#     Parses an OBJ file and returns the vertices, normals, and faces.

#     Args:
#         file_path (str): The path to the OBJ file.

#     Returns:
#         tuple: A tuple containing lists of vertices, normals, and faces.
#     """
#     vertices = []
#     normals = []
#     faces = []

#     with open(file_path, 'r') as file:
#         for line in file:
#             if line.startswith('v '):
#                 # Vertex
#                 parts = line.strip().split()
#                 vertex = tuple(map(float, parts[1:]))
#                 vertices.append(vertex)
#             elif line.startswith('vn '):
#                 # Normal
#                 parts = line.strip().split()
#                 normal = tuple(map(float, parts[1:]))
#                 normals.append(normal)
#             elif line.startswith('f '):
#                 # Face
#                 parts = line.strip().split()[1:]
#                 face = [tuple(map(int, part.split('/'))) for part in parts]
#                 faces.append(face)

#     return vertices, normals, faces


def obj_parser(obj_string):
    all_vertices = []
    triangle_points = []

    for line in obj_string.splitlines(obj_string):
        if line.startswith("v "):
            axes = line[1:].strip().split(" ")
            vertex = float3(float(axes[0]), float(axes[1]), float(axes[2]))
            all_vertices.append(vertex)
        elif line.startswith("f "):
            face_index_groups = line[1:].strip().split(" ")

            for i in range(len(face_index_groups)):
                index_group = face_index_groups[i].split("/")
                vertex_index = int(index_group[0]) - 1

                if i >= 3:
                    triangle_points.append(triangle_points[-(3 * i - 6)])  # n-gon triangle fan
                    triangle_points.append(triangle_points[-2])  # n-gon triangle fan

                triangle_points.append(all_vertices[vertex_index])

    return triangle_points
